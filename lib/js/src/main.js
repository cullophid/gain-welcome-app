// Generated by BUCKLESCRIPT VERSION 1.8.1, PLEASE EDIT WITH CARE
'use strict';

var App                  = require("./pages/app.js");
var Eff                  = require("./eff.js");
var Data                 = require("./data.js");
var Block                = require("bs-platform/lib/js/block.js");
var HomePage             = require("./pages/homePage.js");
var LoginPage            = require("./pages/loginPage.js");
var ReasonReact          = require("reason-react/lib/js/src/reasonReact.js");
var ThankYouPage         = require("./pages/thankYouPage.js");
var VisitorDetailsPage   = require("./pages/visitorDetailsPage.js");
var VisitorInterestsPage = require("./pages/visitorInterestsPage.js");

function update(action, state) {
  if (typeof action === "number") {
    return /* tuple */[
            state,
            Eff.none
          ];
  } else {
    switch (action.tag | 0) {
      case 0 : 
          return /* tuple */[
                  /* record */[
                    /* session */state[/* session */0],
                    /* page */state[/* page */1],
                    /* loginForm */action[0],
                    /* visitorForm */state[/* visitorForm */3]
                  ],
                  Eff.none
                ];
      case 1 : 
          return /* tuple */[
                  /* record */[
                    /* session : Pending */1,
                    /* page */state[/* page */1],
                    /* loginForm */state[/* loginForm */2],
                    /* visitorForm */state[/* visitorForm */3]
                  ],
                  Eff.login(action[0])
                ];
      case 2 : 
          return /* tuple */[
                  /* record */[
                    /* session : Ready */Block.__(1, [action[0]]),
                    /* page : Home */1,
                    /* loginForm */Data.emptyLoginForm,
                    /* visitorForm */state[/* visitorForm */3]
                  ],
                  Eff.none
                ];
      case 3 : 
          return /* tuple */[
                  /* record */[
                    /* session : Error */Block.__(0, [action[0]]),
                    /* page */state[/* page */1],
                    /* loginForm */state[/* loginForm */2],
                    /* visitorForm */state[/* visitorForm */3]
                  ],
                  Eff.none
                ];
      case 4 : 
          var init = state[/* visitorForm */3];
          var visitorForm_000 = /* visitorType */action[0];
          var visitorForm_001 = /* visitorInterests */init[/* visitorInterests */1];
          var visitorForm_002 = /* name */init[/* name */2];
          var visitorForm_003 = /* mobile */init[/* mobile */3];
          var visitorForm_004 = /* concent */init[/* concent */4];
          var visitorForm = /* record */[
            visitorForm_000,
            visitorForm_001,
            visitorForm_002,
            visitorForm_003,
            visitorForm_004
          ];
          return /* tuple */[
                  /* record */[
                    /* session */state[/* session */0],
                    /* page */state[/* page */1],
                    /* loginForm */state[/* loginForm */2],
                    /* visitorForm */visitorForm
                  ],
                  Eff.none
                ];
      case 5 : 
          var init$1 = state[/* visitorForm */3];
          var visitorForm_000$1 = /* visitorType */init$1[/* visitorType */0];
          var visitorForm_001$1 = /* visitorInterests */action[0];
          var visitorForm_002$1 = /* name */init$1[/* name */2];
          var visitorForm_003$1 = /* mobile */init$1[/* mobile */3];
          var visitorForm_004$1 = /* concent */init$1[/* concent */4];
          var visitorForm$1 = /* record */[
            visitorForm_000$1,
            visitorForm_001$1,
            visitorForm_002$1,
            visitorForm_003$1,
            visitorForm_004$1
          ];
          return /* tuple */[
                  /* record */[
                    /* session */state[/* session */0],
                    /* page */state[/* page */1],
                    /* loginForm */state[/* loginForm */2],
                    /* visitorForm */visitorForm$1
                  ],
                  Eff.none
                ];
      case 6 : 
          return /* tuple */[
                  /* record */[
                    /* session */state[/* session */0],
                    /* page */state[/* page */1],
                    /* loginForm */state[/* loginForm */2],
                    /* visitorForm */action[0]
                  ],
                  Eff.none
                ];
      default:
        return /* tuple */[
                state,
                Eff.none
              ];
    }
  }
}

function render(state, dispatch) {
  var match = state[/* page */1];
  switch (match) {
    case 0 : 
        return ReasonReact.element(/* None */0, /* None */0, LoginPage.make(dispatch, state[/* loginForm */2], state[/* session */0], /* array */[]));
    case 1 : 
        return ReasonReact.element(/* None */0, /* None */0, HomePage.make(dispatch, /* array */[]));
    case 2 : 
        return ReasonReact.element(/* None */0, /* None */0, VisitorInterestsPage.make(dispatch, /* array */[]));
    case 3 : 
        return ReasonReact.element(/* None */0, /* None */0, VisitorDetailsPage.make(dispatch, state[/* visitorForm */3], /* array */[]));
    case 4 : 
        return ReasonReact.element(/* None */0, /* None */0, ThankYouPage.make(dispatch, /* array */[]));
    
  }
}

function app() {
  return ReasonReact.element(/* None */0, /* None */0, App.make(Data.emptyModel, update, render, /* array */[]));
}

exports.update = update;
exports.render = render;
exports.app    = app;
/* App Not a pure module */
